{
	"label": "Макросы",
	"entries": {
		"Create New Character": {
			"name": "Создать мышь",
			"command": "await game.mausritter.autoCreateCharacter();"
		},
		"Generate Hex": {
			"name": "Создать гекс",
			"command": "const compendium_label = CONFIG.MAUSRITTER.tables.tables;\n\n(async () => {\n\tconst hexTypeList = [\n\t\t\"Случайно\",\n\t\t\"Сельская местность\",\n\t\t\"Лес\",\n\t\t\"Река\",\n\t\t\"Человеческий город\",\n\t];\n\tlet selectList = \"\";\n\n\tfor (const option of hexTypeList) {\n\t\tselectList += `<option value='${option}'>${option}</option>`;\n\t}\n\n\tconst d = new Dialog({\n\t\ttitle: \"Выбор типа гекса\",\n\t\tcontent: `<h2> Выберите тип гекса </h2> <select style='margin-bottom:10px;'name='stat' id='stat'> ${selectList}</select> <br/>`,\n\t\tbuttons: {\n\t\t\troll: {\n\t\t\t\ticon: '<i class=\"fas fa-check\"></i>',\n\t\t\t\tlabel: \"Бросок\",\n\t\t\t\tcallback: (html) => hexType(html.find('[id=\"stat\"]')[0].value),\n\t\t\t},\n\t\t\tcancel: {\n\t\t\t\ticon: '<i class=\"fas fa-times\"></i>',\n\t\t\t\tlabel: \"Отмена\",\n\t\t\t\tcallback: () => {},\n\t\t\t},\n\t\t},\n\t\tdefault: \"roll\",\n\t\tclose: () => {},\n\t});\n\td.render(true);\n})();\n\nasync function hexType(hexType) {\n\tlet type = hexType;\n\tlet hexContents = \"\";\n\tlet hexDetails = \"\";\n\tlet buffer = \"\";\n\tconst randomHex = [\"Сельская местность\", \"Лес\", \"Река\", \"Человеческий город\"];\n\n\tif (type === \"Случайно\") {\n\t\ttype = randomHex[Math.floor(Math.random() * randomHex.length)];\n\t}\n\n\tbuffer = await drawFromTable(`Гекс - ${type}`);\n\tbuffer = await buffer.roll();\n\thexContents = buffer.results[0].data.text;\n\n\tbuffer = await drawFromTable(\"Гекс - Интересная деталь\");\n\tbuffer = await buffer.roll();\n\thexDetails = buffer.results[0].data.text;\n\n\tconst message = `\n  <h2>${type}: </h2>\n  <b> Ориентир: </b>${hexContents}</br>\n  <b> Деталь: </b><i>${hexDetails}</i></br>`;\n\n\tconst chatData = {\n\t\tcontent: message,\n\t\twhisper: ChatMessage.getWhisperRecipients(\"GM\"),\n\t};\n\n\tChatMessage.create(chatData);\n}\n\nasync function drawFromTable(tableName) {\n\tconst list_compendium = await game.packs.filter(\n\t\t(p) => p.documentName === \"RollTable\",\n\t);\n\tconst inside = await list_compendium\n\t\t.filter((p) => p.metadata.label === compendium_label)[0]\n\t\t.getDocuments();\n\tconst table = await inside.filter((p) => p.data.name === tableName)[0];\n\n\tif (!table) {\n\t\tui.notifications.warn(`Таблица ${tableName} не найдена.`, {});\n\t\treturn;\n\t}\n\treturn await table;\n}"
		},
		"NPC Generator": {
			"name": "Создание персонажа ведущего",
			"command": "const compendium_label = CONFIG.MAUSRITTER.tables.tables;\n\n(async () => {\n\tconst Appearance = await drawFromTable(\n\t\tCONFIG.MAUSRITTER.tables.npcAppearance,\n\t);\n\tconst Birthsign = await drawFromTable(CONFIG.MAUSRITTER.tables.npcBirthsign);\n\tconst Quirk = await drawFromTable(CONFIG.MAUSRITTER.tables.npcQuirk);\n\tconst Social = await drawFromTable(CONFIG.MAUSRITTER.tables.npcSocial);\n\tconst Wants = await drawFromTable(CONFIG.MAUSRITTER.tables.npcWants);\n\tconst Relationship = await drawFromTable(\n\t\tCONFIG.MAUSRITTER.tables.npcRelationship,\n\t);\n\tconst Birthname = await drawFromTable(CONFIG.MAUSRITTER.tables.firstName);\n\tconst Matriname = await drawFromTable(CONFIG.MAUSRITTER.tables.lastName);\n\n\tconst dexterity = attrRoll();\n\tconst strength = attrRoll();\n\tconst will = attrRoll();\n\tconst health = healthRoll();\n\n\tlet msg = \"\";\n\tmsg += `<p><b>Положение в обществе и плата за услуги:</b> ${Social}</p>`;\n\tmsg += `<p><b>Внешность:</b> ${Appearance}</p>`;\n\tmsg += `<p><b>Особенность:</b> ${Quirk}</p>`;\n\tmsg += `<p><b>Желания:</b> ${Wants}</p>`;\n\tmsg += `<p><b>Отношения:</b> ${Relationship}</p>`;\n\n\t//let npchp = randomHP(4,10);\n\tconst instantNPC = await Actor.create({\n\t\tname: `${Birthname} ${Matriname}`,\n\t\ttype: \"hireling\",\n\t\tdata: {\n\t\t\tdescription: {\n\t\t\t\tdisposition: Birthsign,\n\t\t\t},\n\t\t\tnotes: msg,\n\t\t\tstats: {\n\t\t\t\tdexterity: {\n\t\t\t\t\tmax: dexterity,\n\t\t\t\t\tvalue: dexterity,\n\t\t\t\t},\n\t\t\t\tstrength: {\n\t\t\t\t\tmax: strength,\n\t\t\t\t\tvalue: strength,\n\t\t\t\t},\n\t\t\t\twill: {\n\t\t\t\t\tmax: will,\n\t\t\t\t\tvalue: will,\n\t\t\t\t},\n\t\t\t},\n\t\t\thealth: {\n\t\t\t\tmax: health,\n\t\t\t\tvalue: health,\n\t\t\t},\n\t\t},\n\t});\n\n\tawait instantNPC.sheet.render(true);\n})();\n\nasync function drawFromTable(tableName) {\n\tconst list_compendium = await game.packs.filter(\n\t\t(p) => p.documentName === \"RollTable\",\n\t);\n\tconst inside = await list_compendium\n\t\t.filter((p) => p.metadata.label === compendium_label)[0]\n\t\t.getDocuments();\n\tconst table = await inside.filter((p) => p.data.name === tableName)[0];\n\n\tif (!table) {\n\t\tui.notifications.warn(`Таблица ${tableName} не найдена.`, {});\n\t\treturn;\n\t}\n\n\tconst buffer = await table.roll();\n\n\treturn buffer.results[0].data.text;\n}\n\nfunction treasureCoins(min, max) {\n\treturn Math.floor(Math.random() * (max - min)) + min;\n}\n\nfunction attrRoll() {\n\treturn new Roll(\"2d6\").roll({ async: false }).total;\n}\n\nfunction healthRoll() {\n\treturn new Roll(\"1d6\").roll({ async: false }).total;\n}\n\nfunction randomHP(min, max) {\n\treturn Math.floor(Math.random() * (max - min)) + min;\n}"
		},
		"Roll Stat": {
			"name": "Проверка характеристики",
			"command": "game.mausritter.rollStatMacro();"
		},
		"Roll Weather": {
			"name": "Определение погоды",
			"command": "const compendium_label = CONFIG.MAUSRITTER.tables.tables;\n\n(async () => {\n\tconst seasonList = [\"Лето\", \"Осень\", \"Зима\", \"Весна\"];\n\tlet selectList = \"\";\n\n\tfor (const option of seasonList) {\n\t\tselectList += `<option value='${option}'>${option}</option>`;\n\t}\n\n\tconst d = new Dialog({\n\t\ttitle: \"Выбор времени года\",\n\t\tcontent: `<h2> Время года </h2> <select style='margin-bottom:10px;'name='stat' id='stat'> ${selectList}</select><br/>`,\n\t\tbuttons: {\n\t\t\troll: {\n\t\t\t\ticon: '<i class=\"fas fa-check\"></i>',\n\t\t\t\tlabel: \"Бросок\",\n\t\t\t\tcallback: (html) =>\n\t\t\t\t\tdrawFromTable(`Погода - ${html.find('[id=\"stat\"]')[0].value}`),\n\t\t\t},\n\t\t\tcancel: {\n\t\t\t\ticon: '<i class=\"fas fa-times\"></i>',\n\t\t\t\tlabel: \"Отмена\",\n\t\t\t\tcallback: () => {},\n\t\t\t},\n\t\t},\n\t\tdefault: \"roll\",\n\t\tclose: () => {},\n\t});\n\td.render(true);\n})();\n\nasync function drawFromTable(tableName) {\n\tconst list_compendium = await game.packs.filter(\n\t\t(p) => p.documentName === \"RollTable\",\n\t);\n\tconst inside = await list_compendium\n\t\t.filter((p) => p.metadata.label === compendium_label)[0]\n\t\t.getDocuments();\n\tconst table = await inside.filter((p) => p.data.name === tableName)[0];\n\n\tif (!table) {\n\t\tui.notifications.warn(`Таблица ${tableName} не найдена.`, {});\n\t\treturn;\n\t}\n\n\tlet weather = await table.roll();\n\tweather = weather.results[0].data.text;\n\tconst message = `<h2>Погода: </h2><b style='font-size:120%;'>${weather}</br>`;\n\n\tconst chatData = {\n\t\tcontent: message,\n\t\twhisper: ChatMessage.getWhisperRecipients(\"GM\"),\n\t};\n\n\tChatMessage.create(chatData);\n}"
		}
	}
}
